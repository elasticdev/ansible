#!/usr/bin/env python
#
#This file is part of "jiffy".
#
#Project: jiffy: A product for building and managing infrastructure: 
#cloud provider services, and servers and their configurations.
#
#Description: A product for building and managing infrastructure. 
#This includes third party API calls for services such as virtual
#cloud servers, load balancers, databases, and other. The product 
#manages connectivity and appropriate communication among these 
#aws.
#
#Copyright (C) Gary Leong - All Rights Reserved
#Unauthorized copying of this file, via any medium is strictly prohibited
#Proprietary and confidential
#Written by Gary Leong  <gwleong@gmail.com, September 17,2020

import os
import sys

from ed_helper_publisher.loggerly import ElasticDevLogger
from ed_helper_publisher.resource_manage import ResourceCmdHelper

class Main(ResourceCmdHelper):

    def __init__(self,**kwargs):

        ResourceCmdHelper.__init__(self)
        self.classname = 'MONGODB_ANSIBLE_PRIVATE_KEY'
        self.logger = ElasticDevLogger(self.classname,logcategory="cloudprovider")
        self.logger.debug("Instantiating %s" % self.classname)

        set_env_vars = [ "JOB_INSTANCE_ID",
                         "SCHEDULE_ID",
                         "RUN_ID",
                         "ANS_VAR_private_key",
                         "ANSIBLE_DIR",
                         "method" ]

        self.set_inputargs(set_env_vars=set_env_vars,upper_case=None)
        self._re_map_ansible_vars()

    def _re_map_ansible_vars(self):

        for _key,_value in self.inputargs.iteritems():
            if "ANS_VAR_" not in _key: continue
            _mapped_key = _key.split("ANS_VAR_")[-1]
            self.logger.debug("mapped key {} value {}".format(_key,_value))
            self.inputargs[_mapped_key] = _value
            del self.inputargs[_key]

    def _set_vars(self):

        self.run_dir = os.getcwd()

        working_subdir = self.inputargs.get("ansible_dir","/var/tmp/ansible")
        if working_subdir[0] == "/": working_subdir = working_subdir[1:]

        self.app_dir = "{}/{}".format(self.run_dir,working_subdir)

        # stateful_id 
        # Testingyoyo
        self.stateful_id = os.environ.get("STATEFUL_ID")
        if not self.stateful_id: self.stateful_id = id_generator(20)

        # stateful_dir 
        self.share_dir = os.environ.get("SHARE_DIR","/var/tmp/share")

        if self.stateful_id:
            self.run_share_dir = os.path.join(self.share_dir,self.stateful_id)
        else:
            self.run_share_dir = None

    def _write_file(self,key,filepath):

        if not self.inputargs.get(key): return

        with open(filepath,"wb") as wfile:
            for _line in self.inputargs[key].split('\\n'):
                wfile.write(_line)
                wfile.write("\n")

    def _create_ssh_key(self):

        filepath = "{}/ssh_key.pem".format(self.app_dir)
        self._write_file("private_key",filepath)
        os.system("chmod 400 {}".format(filepath))
        
    def create(self):

        self._set_vars()
        self._create_ssh_key()
        self._sync_to_share()

def usage():

    print """
script + environmental variables

or

script + json_input (as argument)

environmental variables:

    create:
        JOB_INSTANCE_ID
        SCHEDULE_ID
        RUN_ID
        "ANSIBLE_DIR
        ANS_VAR_private_key
        method

       """
    exit(4)

if __name__ == '__main__':

    try:
        json_input = sys.argv[1]
    except:
        json_input = None

    main = Main()

    if main.inputargs.get("method","create") == "create":

        main.check_required_inputargs(keys=["private_key"])
        main.create()

    else:
        usage()
        print 'method "{}" not supported!'.format(main.inputargs.get("method","create"))
        exit(4)
