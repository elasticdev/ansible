#!/usr/bin/env python
#
#This file is part of "jiffy".
#
#Project: jiffy: A product for building and managing infrastructure: 
#cloud provider services, and servers and their configurations.
#
#Description: A product for building and managing infrastructure. 
#This includes third party API calls for services such as virtual
#cloud servers, load balancers, databases, and other. The product 
#manages connectivity and appropriate communication among these 
#aws.
#
#Copyright (C) Gary Leong - All Rights Reserved
#Unauthorized copying of this file, via any medium is strictly prohibited
#Proprietary and confidential
#Written by Gary Leong  <gwleong@gmail.com, September 17,2020

import sys

from ed_helper_publisher.loggerly import ElasticDevLogger
from ed_helper_publisher.resource_manage import ResourceCmdHelper

class Main(ResourceCmdHelper):

    def __init__(self,**kwargs):

        # Testingyoyo
        ResourceCmdHelper.__init__(self,app_name="ansible",must_exists=["stateful_id"])

        self.classname = 'ANSIBLE_PRIVATE_KEY'
        self.logger = ElasticDevLogger(self.classname,logcategory="cloudprovider")
        self.logger.debug("Instantiating %s" % self.classname)

        set_env_vars = [ "JOB_INSTANCE_ID",
                         "SCHEDULE_ID",
                         "RUN_ID",
                         "ANS_VAR_private_key",
                         "ANSIBLE_DIR",
                         "method" ]

        self.set_inputargs(set_env_vars=set_env_vars,upper_case=None)

        # if you want to remap vars for the application in the inputargs
        # e.g. ANS_VAR_mongodb_public_ips to mongodb_public_ips
        self.remap_app_vars()

    def create(self):

        #filepath = "{}/ssh_key.pem".format(self.run_share_dir)

        filepath = "{}/ssh_key.pem".format(self.app_dir)

        self.write_key_to_file(key="private_key",
                               filepath=filepath,
                               split_char="return",
                               add_return=True,
                               permission=400)
        #copy_to_share=True)

def usage():

    print """
script + environmental variables

or

script + json_input (as argument)

environmental variables:

    create:
        JOB_INSTANCE_ID
        SCHEDULE_ID
        RUN_ID
        ANSIBLE_DIR
        ANS_VAR_private_key
        method

       """
    exit(4)

if __name__ == '__main__':

    try:
        json_input = sys.argv[1]
    except:
        json_input = None

    main = Main()

    if main.inputargs.get("method","create") == "create":

        main.check_required_inputargs(keys=["private_key"])
        main.create()

    else:
        usage()
        print 'method "{}" not supported!'.format(main.inputargs.get("method","create"))
        exit(4)
